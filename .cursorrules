# CodeWise 项目开发规则

## 项目概述
CodeWise是一个基于代码知识图谱的智能代码库检索与问答Agent，通过深度解析代码库构建文件间依赖关系图谱，为开发者提供精准、上下文完整的代码理解和问答体验。项目目标是超越传统文本搜索，构建能够真正"理解"代码库的AI Agent。

## 技术栈要求

### 后端开发
- 使用 Python 3.13.5 + FastAPI
- 虚拟环境管理：miniconda (环境名: codewise)
- 大语言模型：deepseek-coder-v2 (本地部署)
- 向量数据库：chroma_db
- 中文嵌入模型：BAAI/bge-m3
- RAG框架：LlamaIndex
- **高级Agent框架：LangGraph**

### 前端开发
- 使用 React 18 + Vite + TypeScript
- UI组件库：Ant Design React
- Node.js版本：20.19.3

### 代码解析与知识图谱构建
- 代码解析器：@babel/parser, @babel/traverse, @babel/types, @babel/preset-react
- AST分析：精确提取import语句、React组件、Hooks、依赖关系
- 路径解析：支持别名路径和相对路径解析
- 图谱构建：文件作为节点，依赖关系作为边
- React特性：深度解析JSX、函数组件、类组件、Hooks调用

## 代码规范

### Python后端规范
- 使用 FastAPI 异步编程范式
- 遵循 PEP 8 代码风格
- 使用类型提示 (Type Hints)
- API路由使用清晰的RESTful设计
- 中文注释和文档字符串
- 错误处理使用统一的异常处理机制

### React前端规范
- 使用 React Hooks 和函数组件
- 组件命名使用 PascalCase
- 文件命名使用 PascalCase (.jsx/.tsx)
- 使用 TypeScript 进行类型定义
- 组件Props使用interface类型声明
- useState、useEffect等Hooks规范使用
- 中文注释和变量命名

### 代码解析器规范
- 保持源代码和注释的完整性
- 精确记录行号和位置信息
- 依赖关系解析必须包含source、resolvedPath和imports信息
- 支持React JSX/TSX、JavaScript、TypeScript文件解析
- 路径解析支持项目别名配置(@/、../等)
- React特性解析：组件、Hooks、Props、JSX结构

## 项目结构规则

### 目录组织
- `frontend/` - React 18前端代码，使用vite构建
- `rag/` - Python FastAPI RAG服务
- `agent/` - Python LangGraph Agent服务
- `parser/` - **代码知识图谱解析器**，构建文件依赖关系图谱
- `models/` - 本地嵌入模型存储目录
- `db/` - chroma_db向量数据库文件
- `data/` - 源码文件和处理后的JSON知识图谱节点
- `scripts/` - 部署和运维脚本

### 文件命名约定
- Python文件：使用snake_case
- React组件：使用PascalCase.jsx/.tsx
- TypeScript类型文件：使用camelCase.ts
- 配置文件：使用kebab-case
- 知识图谱JSON文件：与源文件同名，后缀改为.json

## 开发最佳实践

### 环境管理
- 始终在codewise虚拟环境中开发
- 使用 `conda activate codewise` 激活环境
- 依赖更新需要同步更新requirements.txt

### 代码质量
- 编写单元测试，特别是核心RAG功能和依赖关系解析
- 使用中文注释解释业务逻辑
- API接口需要提供中文文档
- 向量搜索和嵌入相关代码需要详细注释

### 知识图谱相关开发
- **依赖关系准确性**：确保import语句解析的准确性，支持动态导入
- **路径解析一致性**：所有文件路径必须解析为项目内的唯一标识
- **图谱完整性**：确保所有文件节点和边关系的完整记录
- **循环依赖检测**：在构建图谱时检测并处理循环依赖
- **增量更新**：支持文件变更时的增量图谱更新

### RAG相关开发
- 向量化处理需要考虑中文分词特性
- **代码检索结果需要保持跨文件上下文完整性**
- 问答生成要针对代码理解进行优化
- 嵌入模型调用需要做好错误处理和重试机制
- **支持基于调用链的上下文扩展**

### LangGraph Agent开发 
- **状态管理**：维护全局上下文栈、访问文件列表、调用链记录
- **节点设计**：实现Retrieve、Analyze、Router、Generate四个核心节点
- **边条件**：基于依赖关系和相关性进行智能路由决策
- **循环控制**：避免无限循环，设置合理的分析深度限制
- **上下文优化**：确保多文件上下文的有效组织和传递

### 性能优化
- 向量搜索使用异步处理
- 大文件解析采用流式处理
- 前端组件使用懒加载
- API响应实现分页和缓存
- **图谱查询优化**：使用索引加速依赖关系查询
- **并行解析**：支持多文件并行解析以提升效率

## 特殊注意事项

### 中文处理
- 所有用户界面文本使用简体中文
- 代码注释和文档使用中文
- 搜索和问答功能要针对中文优化

### 本地模型集成
- deepseek-coder-v2模型调用需要做好资源管理
- BAAI/bge-m3嵌入模型要缓存处理结果
- 模型推理失败时要有降级方案

### 跨文件分析
- **调用链追踪**：确保能够完整追踪函数/组件的调用路径
- **影响范围分析**：修改文件时能够快速定位受影响的其他文件
- **上下文聚合**：将相关文件的代码和注释有效聚合为完整上下文

### 安全性
- API接口实现适当的访问控制
- 代码解析要防止恶意代码执行
- 向量数据库访问要做好权限控制
- **路径遍历防护**：防止恶意路径访问项目外文件

## 调试和日志
- 使用结构化日志记录关键操作
- RAG检索过程要有详细的调试信息
- 模型推理时间和性能指标需要监控
- 前端错误要上报到后端日志系统
- **依赖关系解析过程要有详细日志**：记录路径解析、节点创建、边建立等关键步骤
- **Agent工作流日志**：详细记录LangGraph节点间的状态转换和决策过程 